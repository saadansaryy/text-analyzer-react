{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleColorMode","role","aria-checked","htmlFor","toggleMode","Alert","alert","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","TextForm","theme","themeBg","_useState","useState","_useState2","Object","slicedToArray","text","setText","colorMode","Fragment","style","color","heading","value","onChange","event","target","rows","backgroundColor","newText","showAlert","wordsArr","split","wordsMap","Map","i","length","has","set","get","_step","html","_iterator","_createForOfIteratorHelper","entries","s","n","done","_ref3","_ref2","key","err","e","f","document","getElementById","innerHTML","select","navigator","clipboard","writeText","join","defaultProps","aboutText","App","setMode","_useState3","_useState4","setColorMode","_useState5","_useState6","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"mMAIe,SAASA,EAAOC,GAC7B,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAS,kCAAAC,OAAoCL,EAAMM,KAA1C,QAAAD,OAAqDL,EAAMM,OAEpEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAIbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,SAC9BP,EAAMQ,OAETP,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVK,KAAK,SACLC,iBAAe,WACfC,iBAAe,0BACfC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEXb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BAC3Cd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAIZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,SAAxD,SAIFN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAoBhBH,EAAAC,EAAAC,cAAA,OACEC,UAAS,KAAAC,OAAsB,SAAfL,EAAMM,KAAkB,QAAU,OAAzC,sCAAAD,OACQ,UAAfL,EAAMM,KAAmB,OAAS,UAGpCL,EAAAC,EAAAC,cAAA,SACEC,UAAU,mBACVa,QAASjB,EAAMkB,gBACfT,KAAK,WACLU,KAAK,SACLC,gBAAA,EACAL,GAAG,2BAELd,EAAAC,EAAAC,cAAA,SACEC,UAAU,mBACViB,QAAQ,0BAFV,aAOFpB,EAAAC,EAAAC,cAAA,OACEC,UAAS,+BAAAC,OACQ,UAAfL,EAAMM,KAAmB,OAAS,UAGpCL,EAAAC,EAAAC,cAAA,SACEC,UAAU,mBACVa,QAASjB,EAAMsB,WACfb,KAAK,WACLU,KAAK,SACLC,gBAAA,EACAL,GAAG,2BAELd,EAAAC,EAAAC,cAAA,SACEC,UAAU,mBACViB,QAAQ,0BAFV,wBCxFG,SAASE,EAAMvB,GAK5B,OACEA,EAAMwB,OAASvB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiBL,EAAMwB,MAAMf,KAA7B,gCAAiEU,KAAK,SAC/FlB,EAAAC,EAAAC,cAAA,cANe,SAACsB,GAChB,IAAMC,EAAQD,EAAKE,cACnB,OAAOD,EAAME,OAAO,GAAGC,cAAgBH,EAAMI,MAAM,GAI1CC,CAAW/B,EAAMwB,MAAMf,MAAhC,MAAkDT,EAAMwB,MAAMQ,4hCCNvD,SAASC,EAASjC,GAC/B,IA0DIkC,EACAC,EA5DkCC,EAwDdC,mBAAS,IAxDKC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAwD/BK,EAxD+BH,EAAA,GAwDzBI,EAxDyBJ,EAAA,GAiEtC,MAJkB,SAAftC,EAAMM,OACP4B,EAA0B,YAAlBlC,EAAM2C,UAAsB,QAAQ,QAC5CR,EAA8B,YAApBnC,EAAM2C,UAAwB,UAAU,SAGlD1C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0C,SAAA,KACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYyC,MAAO,CAACC,MAAuB,SAAf9C,EAAMM,KAAgB,QAAQ,UACvEL,EAAAC,EAAAC,cAAA,UAAKH,EAAM+C,SACX9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,YACEC,UAAU,eACVW,GAAG,QACHiC,MAAOP,EACPQ,SAvBa,SAACC,GAEtBR,EAAQQ,EAAMC,OAAOH,QAsBbI,KAAK,IACLP,MAAO,CAACQ,gBAAiC,SAAfrD,EAAMM,KAAN,GAAAD,OAAyB8B,GAAU,QAAQW,MAAuB,SAAf9C,EAAMM,KAAN,GAAAD,OAAyB6B,GAAQ,YAGlHjC,EAAAC,EAAAC,cAAA,UAAQC,UAAS,WAAAC,OAA0B,SAAbL,EAAMM,KAAcN,EAAM2C,UAAU,UAAjD,SAAmE1B,QA9EpE,WAEpB,IAAIqC,EAAUb,EAAKZ,cACnBa,EAAQY,GACRtD,EAAMuD,UAAU,yBAAyB,aA0ErC,wBAGAtD,EAAAC,EAAAC,cAAA,UAAQC,UAAS,WAAAC,OAA0B,SAAbL,EAAMM,KAAcN,EAAM2C,UAAU,UAAjD,SAAmE1B,QA3EnE,WAErB,IAAIqC,EAAUb,EAAKd,cACnBe,EAAQY,GACRtD,EAAMuD,UAAU,yBAAyB,aAuErC,wBAGAtD,EAAAC,EAAAC,cAAA,UAAQC,UAAS,WAAAC,OAA0B,SAAbL,EAAMM,KAAcN,EAAM2C,UAAU,UAAjD,SAAmE1B,QAxElE,WAItB,IAFA,IAAIuC,EAAWf,EAAKgB,MAAM,KACtBC,EAAW,IAAIC,IACVC,EAAI,EAAGA,EAAIJ,EAASK,OAAQD,IAC9BF,EAASI,IAAIN,EAASI,KACzBF,EAASK,IAAIP,EAASI,GAAI,GAE5BF,EAASK,IAAIP,EAASI,GAAIF,EAASM,IAAIR,EAASI,IAAM,GAExD,IAV4BK,EAUxBC,EAAI,GAVoBC,EAAAC,EAWHV,EAASW,WAXN,IAW5B,IAAAF,EAAAG,MAAAL,EAAAE,EAAAI,KAAAC,MAA6C,KAAAC,EAAAR,EAAAjB,MAAA0B,EAAAnC,OAAAC,EAAA,EAAAD,CAAAkC,EAAA,GAAnCE,EAAmCD,EAAA,GAA9B1B,EAA8B0B,EAAA,GAC/B,KAARC,IACFT,GAAI,cAAA7D,OAAkBsE,EAAlB,gBAAAtE,OAAoC2C,EAApC,UAboB,MAAA4B,GAAAT,EAAAU,EAAAD,GAAA,QAAAT,EAAAW,IAgBhBC,SAASC,eAAe,SAC9BC,UAAYf,IAuDd,kBAGAjE,EAAAC,EAAAC,cAAA,UAAQC,UAAS,WAAAC,OAA0B,SAAbL,EAAMM,KAAcN,EAAM2C,UAAU,UAAjD,SAAmE1B,QAvDlE,WACtB,IAAIwB,EAAOsC,SAASC,eAAe,SACnCvC,EAAKyC,SACLC,UAAUC,UAAUC,UAAU5C,EAAKO,OACnChD,EAAMuD,UAAU,sBAAsB,aAmDlC,aAGAtD,EAAAC,EAAAC,cAAA,UAAQC,UAAS,WAAAC,OAA0B,SAAbL,EAAMM,KAAcN,EAAM2C,UAAU,UAAjD,SAAmE1B,QApD9D,WAC1B,IAAIqC,EAAUb,EAAKgB,MAAM,QACzBf,EAAQY,EAAQgC,KAAK,MACrBtF,EAAMuD,UAAU,uBAAuB,aAiDnC,uBAGAtD,EAAAC,EAAAC,cAAA,UAAQC,UAAS,WAAAC,OAA0B,SAAbL,EAAMM,KAAcN,EAAM2C,UAAU,UAAjD,SAAmE1B,QAlDjE,WAGvByB,EADc,IAEFqC,SAASC,eAAe,SAC9BC,UAAY,KA6Cd,UAIFhF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yDAAyDyC,MAAO,CAACC,MAAuB,SAAf9C,EAAMM,KAAgB,QAAQ,UACpHL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SACGsC,EAAKgB,MAAM,KAAKI,OADnB,cACsCpB,EAAKoB,OAD3C,eAGA5D,EAAAC,EAAAC,cAAA,2BAAmB,KAAQsC,EAAKgB,MAAM,KAAKI,OAA3C,aACA5D,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAIsC,EAAKoB,OAAO,EAAEpB,EAAK,6CAEzBxC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,OAAKY,GAAG,aFLlBhB,EAAOwF,aAAe,CACpB/E,MAAO,YACPgF,UAAW,SGxBEC,MA7Ef,WAAe,IAAArD,EACWC,mBAAS,SADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACN9B,EADMgC,EAAA,GACAoD,EADApD,EAAA,GAAAqD,EAEqBtD,mBAAS,WAF9BuD,EAAArD,OAAAC,EAAA,EAAAD,CAAAoD,EAAA,GAENhD,EAFMiD,EAAA,GAEKC,EAFLD,EAAA,GAAAE,EAGazD,mBAAS,MAHtB0D,EAAAxD,OAAAC,EAAA,EAAAD,CAAAuD,EAAA,GAGNtE,EAHMuE,EAAA,GAGCC,EAHDD,EAAA,GAKPxC,EAAY,SAAC0C,EAASxF,GAC1BuF,EAAS,CACPhE,IAAKiE,EACLxF,KAAMA,IAERyF,WAAW,WACTF,EAAS,OACR,MA6BL,OACE/F,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0C,SAAA,KAGI3C,EAAAC,EAAAC,cAACJ,EAAD,CACES,MAAM,YACNF,KAAMA,EACNqC,UAAWA,EACXrB,WAlCW,WACJ,UAAThB,GACFoF,EAAQ,QAENX,SAASoB,KAAKtD,MAAMQ,gBADJ,YAAdV,EACoC,UAEA,UAExCY,EAAU,6BAA8B,aAExCmC,EAAQ,SACRX,SAASoB,KAAKtD,MAAMQ,gBAAkB,QACtCE,EAAU,8BAA+B,aAuBrCrC,gBAnBgB,WACJ,YAAdyB,GACFkD,EAAa,UACbd,SAASoB,KAAKtD,MAAMQ,gBAAkB,YAEtCwC,EAAa,WACbd,SAASoB,KAAKtD,MAAMQ,gBAAkB,cAepCpD,EAAAC,EAAAC,cAACoB,EAAD,CAAOC,MAAOA,IACdvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAUPH,EAAAC,EAAAC,cAAC8B,EAAD,CACEc,QAAQ,wBACRzC,KAAMA,EACNiD,UAAWA,OC/Dd6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA1B,EAAA,GAAA2B,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWlC,SAASC,eAAe,SACpDkC,OACHjH,EAAAC,EAAAC,cAACF,EAAAC,EAAMiH,WAAP,KACElH,EAAAC,EAAAC,cAACiH,EAAD,QAOJhB","file":"static/js/main.a6865dcb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link> */}\r\n        <a className=\"navbar-brand\" href=\"#home\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link> */} \r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#home\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link> */}\r\n              {/* <a className=\"nav-link\" href=\"/about\">\r\n                {props.aboutText}\r\n              </a> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`d-${props.mode === \"dark\" ? \"block\" : \"none\"} form-check form-switch mx-3 text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleColorMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              aria-checked\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Red Mode\r\n            </label>\r\n          </div>\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              aria-checked\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"TextUtils\",\r\n  aboutText: \"About\",\r\n};\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}! </strong>{props.alert.msg} \r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked \" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UpperCase\",\"success\");\r\n  };\r\n  const handleLowClick = () => {\r\n    // console.log(\"Lowercase was clicked \" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to LowerCase\",\"success\");\r\n  };\r\n  const handleFreqClick = () => {\r\n    // console.log(\"Frequent Words was clicked \" + text);\r\n    let wordsArr = text.split(\" \");\r\n    let wordsMap = new Map();\r\n    for (let i = 0; i < wordsArr.length; i++) {\r\n      if (!wordsMap.has(wordsArr[i])) {\r\n        wordsMap.set(wordsArr[i], 0);\r\n      }\r\n      wordsMap.set(wordsArr[i], wordsMap.get(wordsArr[i]) + 1);\r\n    }\r\n    let html = ``;\r\n    for (let [key, value] of wordsMap.entries()) {\r\n      if (key !== \"\") {\r\n        html += `<p><strong>${key}</strong> - ${value}</p>`;\r\n      }\r\n    }\r\n    let freqP = document.getElementById(\"freqP\");\r\n    freqP.innerHTML = html;\r\n    // console.log(wordsMap);\r\n  };\r\n  const handleCopyClick = () => {\r\n    let text = document.getElementById('myBox');\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to Clipboard\",\"success\");\r\n  }\r\n  const handleExSpacesClick = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra Spaces removed\",\"success\");\r\n  }\r\n  const handleClearClick = () => {\r\n    // console.log(\"Clear was clicked \" + text);\r\n    let newText = \"\";\r\n    setText(newText);\r\n    let freqP = document.getElementById(\"freqP\");\r\n    freqP.innerHTML = \"\";\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"State changed\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  // text = \"new text; //Wrong Way to Change the text\r\n  //   setText(\"new text\"); //Correct Way to Change the text\r\n  let theme;\r\n  let themeBg;\r\n  if(props.mode === \"dark\"){\r\n    theme = props.colorMode===\"primary\"?\"white\":\"black\";\r\n    themeBg = props.colorMode === \"primary\"?\"#212529\":\"white\";\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color : props.mode === \"dark\"?\"white\":\"black\"}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            rows=\"8\"\r\n            style={{backgroundColor : props.mode === \"dark\"?`${themeBg}`:\"white\",color : props.mode === \"dark\"?`${theme}`:\"black\"}}\r\n          ></textarea>\r\n        </div>\r\n        <button className={`btn btn-${props.mode===\"dark\"?props.colorMode:\"primary\"} mx-1`} onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className={`btn btn-${props.mode===\"dark\"?props.colorMode:\"primary\"} mx-1`} onClick={handleLowClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className={`btn btn-${props.mode===\"dark\"?props.colorMode:\"primary\"} mx-1`} onClick={handleFreqClick}>\r\n          Frequent Words\r\n        </button>\r\n        <button className={`btn btn-${props.mode===\"dark\"?props.colorMode:\"primary\"} mx-1`} onClick={handleCopyClick}>\r\n          Copy Text\r\n        </button>\r\n        <button className={`btn btn-${props.mode===\"dark\"?props.colorMode:\"primary\"} mx-1`} onClick={handleExSpacesClick}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button className={`btn btn-${props.mode===\"dark\"?props.colorMode:\"primary\"} mx-1`} onClick={handleClearClick}>\r\n          Clear\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3 d-flex flex-row justify-content-between\" style={{color : props.mode === \"dark\"?\"white\":\"black\"}}>\r\n        <div>\r\n          <h2>Your Text Summary</h2>\r\n          <p>\r\n            {text.split(\" \").length} words and {text.length} characters\r\n          </p>\r\n          <p>Reading Time : {0.008 * text.split(\" \").length} Minutes.</p>\r\n          <h2>Preview</h2>\r\n          <p>{text.length>0?text:\"Enter your text above to preview it here\"}</p>\r\n        </div>\r\n        <div>\r\n          <h2>Frequency of Words</h2>\r\n          <div id=\"freqP\"></div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTextForm.propTypes = {\r\n  heading: PropTypes.string.isRequired,\r\n};\r\n","import { useState } from \"react\";\nimport React from 'react';\nimport \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport Alert from \"./components/Alert\";\nimport TextForm from \"./components/TextForm\";\n// import { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\n  const [colorMode, setColorMode] = useState(\"primary\"); //Dark mode color themes\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      if (colorMode === \"primary\") {\n        document.body.style.backgroundColor = \"#212520\";\n      } else {\n        document.body.style.backgroundColor = \"darkred\";\n      }\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n\n  const toggleColorMode = () => {\n    if (colorMode === \"primary\") {\n      setColorMode(\"danger\");\n      document.body.style.backgroundColor = \"darkred\";\n    } else {\n      setColorMode(\"primary\");\n      document.body.style.backgroundColor = \"#212520\";\n    }\n  };\n\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"AboutTU\"/> */}\n      {/* <BrowserRouter> */}\n        <Navbar\n          title=\"TextUtils\"\n          mode={mode}\n          colorMode={colorMode}\n          toggleMode={toggleMode}\n          toggleColorMode={toggleColorMode}\n          />\n        <Alert alert={alert} />\n        <div className=\"container\">\n          {/* <Routes> */}\n            {/* Why exact keyword in path?\n            Because of cases like this...\n            /user --> Component 1\n            /user/home --> Component 2 */}\n            {/* <Route exact path=\"/about\" element={<About />}></Route>\n            <Route\n             exact path=\"/\"\n              element={ */}\n                <TextForm\n                  heading=\"Enter text to analyze\"\n                  mode={mode}\n                  showAlert={showAlert}\n                />\n              {/* }\n            ></Route>\n          </Routes> */}\n        </div>\n      {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}